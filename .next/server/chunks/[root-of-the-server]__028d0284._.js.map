{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///E:/UniWork/FYP/Implementation/thirtyPercent/frontendd/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {};\r\n\r\nlet client;\r\nlet clientPromise;\r\n\r\nif (!uri) {\r\n  throw new Error(\"Please add your MongoDB URI to .env.local\");\r\n}\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  if (!global._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    global._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\nexport default clientPromise;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,wCAA4C;IAC1C,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///E:/UniWork/FYP/Implementation/thirtyPercent/frontendd/app/api/register/route.js"],"sourcesContent":["import clientPromise from \"@/lib/mongodb\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { email, password, username } = await req.json();\r\n    const client = await clientPromise;\r\n    const db = client.db();\r\n\r\n    // Check if user already exists\r\n    const existingUser = await db.collection(\"users\").findOne({ email });\r\n    if (existingUser) {\r\n      return new Response(JSON.stringify({ error: \"User already exists\" }), {\r\n        status: 400,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create new user\r\n    await db.collection(\"users\").insertOne({\r\n      email,\r\n      password: hashedPassword,\r\n      username,\r\n      createdAt: new Date(),\r\n    });\r\n\r\n    return new Response(JSON.stringify({ success: true }), {\r\n      status: 201,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ error: \"Failed to register user\" }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QACpD,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE;QAEpB,+BAA+B;QAC/B,MAAM,eAAe,MAAM,GAAG,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAM;QAClE,IAAI,cAAc;YAChB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAsB,IAAI;gBACpE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,kBAAkB;QAClB,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;YACrC;YACA,UAAU;YACV;YACA,WAAW,IAAI;QACjB;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;QAAK,IAAI;YACrD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAA0B,IAAI;YACxE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}