{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///E:/UniWork/FYP/Implementation/thirtyPercent/frontendd/app/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from 'next-auth'\r\n// import AppleProvider from 'next-auth/providers/apple'\r\n// import FacebookProvider from 'next-auth/providers/facebook'\r\n// import GoogleProvider from 'next-auth/providers/google'\r\n// import EmailProvider from 'next-auth/providers/email'\r\nimport GitHubProvider from \"next-auth/providers/github\"\r\n// import mongoose from \"mongoose\";\r\n// import connectDb from '@/db/connectDb';\r\n// import User from '@/models/User';\r\n// import Payment from '@/models/Payment';\r\n \r\n\r\nexport const authoptions =  NextAuth({\r\n    providers: [\r\n      // OAuth authentication providers...\r\n      GitHubProvider({\r\n        clientId: process.env.GITHUB_ID,\r\n        clientSecret: process.env.GITHUB_SECRET\r\n      }),\r\n    //   AppleProvider({\r\n    //     clientId: process.env.APPLE_ID,\r\n    //     clientSecret: process.env.APPLE_SECRET\r\n    //   }),\r\n    //   FacebookProvider({\r\n    //     clientId: process.env.FACEBOOK_ID,\r\n    //     clientSecret: process.env.FACEBOOK_SECRET\r\n    //   }),\r\n    //   GoogleProvider({\r\n    //     clientId: process.env.GOOGLE_ID,\r\n    //     clientSecret: process.env.GOOGLE_SECRET\r\n    //   }),\r\n    //   // Passwordless / email sign in\r\n    //   EmailProvider({\r\n    //     server: process.env.MAIL_SERVER,\r\n    //     from: 'NextAuth.js <no-reply@example.com>'\r\n    //   }),\r\n    ],\r\n    // callbacks: {\r\n    //   async signIn({ user, account, profile, email, credentials }) {\r\n    //      if(account.provider == \"github\") { \r\n    //       await connectDb()\r\n    //       // Check if the user already exists in the database\r\n    //       const currentUser =  await User.findOne({email: email}) \r\n    //       if(!currentUser){\r\n    //         // Create a new user\r\n    //          const newUser = await User.create({\r\n    //           email: user.email, \r\n    //           username: user.email.split(\"@\")[0], \r\n    //         })   \r\n    //       } \r\n    //       return true\r\n    //      }\r\n    //   },\r\n      \r\n    //   async session({ session, user, token }) {\r\n    //     const dbUser = await User.findOne({email: session.user.email})\r\n    //     session.user.name = dbUser.username\r\n    //     return session\r\n    //   },\r\n    // } \r\n \r\n  })\r\n\r\n  export { authoptions as GET, authoptions as POST}"],"names":[],"mappings":";;;;;AAAA;AACA,wDAAwD;AACxD,8DAA8D;AAC9D,0DAA0D;AAC1D,wDAAwD;AACxD;;;AAOO,MAAM,cAAe,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACjC,WAAW;QACT,oCAAoC;QACpC,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;KAkBD;AAyBH","debugId":null}}]
}